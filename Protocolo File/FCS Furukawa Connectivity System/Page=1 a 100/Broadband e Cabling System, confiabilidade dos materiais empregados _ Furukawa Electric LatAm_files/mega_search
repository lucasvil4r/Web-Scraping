/*
	Classe de buscas do salesforce para sites externos
	Pode fazer buscas em objetos salesforce, metadatas (custom labels) e páginas salesforce (pelo metadata buscado).

	Construtor recebe um objeto de configuração que é usado para instanciar as várias possibilidades de trabalho.
	Pode ser definido Objetos de pesquisa.
	Resultado sempre é no mesmo formato, de objeto resultado, contendo o tipo de objeto, id do objeto, url do objeto,
	url de imagem.
	Quando se tratar de uma página, a url da imagem vem vazia, id do obeto é o nome da página, tipo é página do visual
	force, url do objeto é a url para ser acessada pelo site externo.
	Depende da classe Controller_Mega_Search do apex e suas implementações
	
	Autor: Sergio Migueis
	Versão: 0.1

	Histórico de Alterações:
=======================================================================================================================	
	Versão 0.1
	Data 7 julho 2017
	Funções básicas, construtor, estrutura, guidelines, esquemas de request e resposta.


*/
function MegaSearch(pconfiguration){
	this.setConfiguration(pconfiguration);
};
MegaSearch.prototype = {
	constructor: MegaSearch,
	configuration: {
		search_visualforce: false, //busca páginas.
		search_visualforce_metadata: true, //Busca custom labels, e depois busca páginas que contenham esses custom labels.
		pais: 'BR',
		estado: 'PR',
		cidade: 'Curitiba', //location para consultas
		idioma: 'pt-br',
		buffer: [],
		queryLimit: 5000,
		searchExact: false,
		objects: [    // faz as buscas nesses objetos.
			{
				api_name: 'Traducao_ET__c',
				fields: ['Name', 'URL__c', 'Descricao_curta__c'],
				recordtype: [],
				conditionals: [ 
				],
				url_field: 'URL__c'
			}
		],
	},
	getConfiguration: function(){
		var that = this;
		return this.configuration;
	},
	setConfiguration: function(newConfiguration){
		var that = this;
		if(newConfiguration != null && newConfiguration != undefined) this.configuration = Object.assign(this.configuration, newConfiguration);;
	},
	search: function(query, callback){
		var that = this;
		console.log(that);
		var parseResult = function(result, event){
			if(result != null && result.records != null 
				&& result.records != undefined 
				&& result.records.length != undefined
				&& result.records.length > 0){
				that.configuration.buffer.concat(result.records);
			}			
			if(callback != null && callback != undefined) return callback(result, event);
		}
		for(var index = 0; index < that.configuration.objects.length; index++){ //para cada objeto que vamos pesquisar4
			if(that.configuration.searchExact == undefined) that.configuration.searchExact = false;
			Site_Busca.searchObject(query, that.configuration.queryLimit, that.configuration.searchExact, that.configuration.objects[index],parseResult, {buffer: false});
		}
		if(that.configuration.search_visualforce){
			Site_Busca.searchVisualforce(query, that.configuration.queryLimit,false, Cookies.get('apex__idioma'), parseResult, {buffer: false});
		}
		else if(that.configuration.search_visualforce_metadata){
			Site_Busca.searchVisualforce(query, that.configuration.queryLimit,true, Cookies.get('apex__idioma'), parseResult, {buffer: false});
		}
	},
	readBuffer: function(){
		var bf = that.buffer;
		that.configuration.buffer = [];
		return bf;
	}



}
